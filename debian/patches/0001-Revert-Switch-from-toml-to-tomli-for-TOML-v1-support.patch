From 73d55ee058352e3d2bb4905a563bc9bc07bbccb3 Mon Sep 17 00:00:00 2001
From: Huw Jones <huw@pexip.com>
Date: Wed, 5 Jan 2022 17:27:03 +0000
Subject: [PATCH] Revert "Switch from `toml` to `tomli` for TOML v1 support
 (#10824)"

This reverts commit aede3aefd75332f3911a43bb4a6a98baacce785a.
---
 build-requirements.txt |  1 +
 mypy-requirements.txt  |  2 +-
 mypy/config_parser.py  | 15 ++++++++-------
 mypy/modulefinder.py   |  4 ++--
 setup.py               |  2 +-
 5 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/build-requirements.txt b/build-requirements.txt
index b4d024ee7..aad1f8e59 100644
--- a/build-requirements.txt
+++ b/build-requirements.txt
@@ -1,2 +1,3 @@
 -r mypy-requirements.txt
 types-typed-ast>=1.4.0,<1.5.0
+types-toml>=0.0
diff --git a/mypy-requirements.txt b/mypy-requirements.txt
index 2bc82e53c..86e442901 100644
--- a/mypy-requirements.txt
+++ b/mypy-requirements.txt
@@ -1,4 +1,4 @@
 typing_extensions>=3.7.4
 mypy_extensions>=0.4.3,<0.5.0
 typed_ast>=1.4.0,<2
-tomli>=1.1.0,<3.0.0
+toml
diff --git a/mypy/config_parser.py b/mypy/config_parser.py
index aecf69168..dc135f1c4 100644
--- a/mypy/config_parser.py
+++ b/mypy/config_parser.py
@@ -1,4 +1,5 @@
 import argparse
+from collections import OrderedDict
 import configparser
 import glob as fileglob
 from io import StringIO
@@ -6,9 +7,9 @@ import os
 import re
 import sys
 
-import tomli
+import toml
 from typing import (Any, Callable, Dict, List, Mapping, MutableMapping,  Optional, Sequence,
-                    TextIO, Tuple, Union)
+                    TextIO, Tuple, Union, cast)
 from typing_extensions import Final
 
 from mypy import defaults
@@ -168,20 +169,20 @@ def parse_config_file(options: Options, set_strict_flags: Callable[[], None],
             continue
         try:
             if is_toml(config_file):
-                with open(config_file, encoding="utf-8") as f:
-                    toml_data = tomli.loads(f.read())
+                toml_data = cast("OrderedDict[str, Any]",
+                                 toml.load(config_file, _dict=OrderedDict))
                 # Filter down to just mypy relevant toml keys
                 toml_data = toml_data.get('tool', {})
                 if 'mypy' not in toml_data:
                     continue
-                toml_data = {'mypy': toml_data['mypy']}
+                toml_data = OrderedDict({'mypy': toml_data['mypy']})
                 parser: MutableMapping[str, Any] = destructure_overrides(toml_data)
                 config_types = toml_config_types
             else:
                 config_parser.read(config_file)
                 parser = config_parser
                 config_types = ini_config_types
-        except (tomli.TOMLDecodeError, configparser.Error, ConfigTOMLValueError) as err:
+        except (toml.TomlDecodeError, configparser.Error, ConfigTOMLValueError) as err:
             print("%s: %s" % (config_file, err), file=stderr)
         else:
             if config_file in defaults.SHARED_CONFIG_FILES and 'mypy' not in parser:
@@ -251,7 +252,7 @@ def is_toml(filename: str) -> bool:
     return filename.lower().endswith('.toml')
 
 
-def destructure_overrides(toml_data: Dict[str, Any]) -> Dict[str, Any]:
+def destructure_overrides(toml_data: "OrderedDict[str, Any]") -> "OrderedDict[str, Any]":
     """Take the new [[tool.mypy.overrides]] section array in the pyproject.toml file,
     and convert it back to a flatter structure that the existing config_parser can handle.
 
diff --git a/mypy/modulefinder.py b/mypy/modulefinder.py
index 18b62d0ff..872bad476 100644
--- a/mypy/modulefinder.py
+++ b/mypy/modulefinder.py
@@ -438,9 +438,9 @@ class FindModuleCache:
         metadata_fnam = os.path.join(stub_dir, 'METADATA.toml')
         if os.path.isfile(metadata_fnam):
             # Delay import for a possible minor performance win.
-            import tomli
+            import toml
             with open(metadata_fnam, encoding="utf-8") as f:
-                metadata = tomli.loads(f.read())
+                metadata = toml.load(f)
             if self.python_major_ver == 2:
                 return bool(metadata.get('python2', False))
             else:
diff --git a/setup.py b/setup.py
index 5012b9bf3..0f0552f7f 100644
--- a/setup.py
+++ b/setup.py
@@ -194,7 +194,7 @@ setup(name='mypy',
       install_requires=["typed_ast >= 1.4.0, < 2; python_version<'3.8'",
                         'typing_extensions>=3.7.4',
                         'mypy_extensions >= 0.4.3, < 0.5.0',
-                        'tomli>=1.1.0,<3.0.0',
+                        'toml',
                         ],
       # Same here.
       extras_require={'dmypy': 'psutil >= 4.0', 'python2': 'typed_ast >= 1.4.0, < 2'},
-- 
2.34.1

